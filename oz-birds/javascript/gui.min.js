/* GUI blend http://gel.westpacgroup.com.au/GUI/WBC/blender/#/_colors:2.0.1/_fonts:2.0.1/_grid:2.0.0/_javascript-helpers:2.0.0/_text-styling:3.0.0/modals:2.0.2/tabcordions:3.0.0 */

/*! Core v2.0.0 */
/***************************************************************************************************************************************************************
 *
 * Westpac GUI framework
 *
 * This core library includes a debugging console, debounce and throttle functions.
 *
 **************************************************************************************************************************************************************/

'use strict';


/*!
Copyright (c) 2011, 2012 Julien Wajsberg <felash@gmail.com>
All rights reserved.

Official repository: https://github.com/julienw/jquery-trap-input
License is there: https://github.com/julienw/jquery-trap-input/blob/master/LICENSE
This is version 1.2.0.
*/
(function(a,b){function d(a){if(a.keyCode===9){var b=!!a.shiftKey;e(this,a.target,b)&&(a.preventDefault(),a.stopPropagation())}}function e(a,b,c){var d=i(a),e=b,f,g,h,j;do{f=d.index(e),g=f+1,h=f-1,j=d.length-1;switch(f){case-1:return!1;case 0:h=j;break;case j:g=0}c&&(g=h),e=d.get(g);try{e.focus()}catch(k){}}while(b===b.ownerDocument.activeElement);return!0}function f(){return this.tabIndex>0}function g(){return!this.tabIndex}function h(a,b){return a.t-b.t||a.i-b.i}function i(b){var c=a(b),d=[],e=0;return m.enable&&m.enable(),c.find("a[href], link[href], [draggable=true], [contenteditable=true], :input:enabled, [tabindex=0]").filter(":visible").filter(g).each(function(a,b){d.push({v:b,t:0,i:e++})}),c.find("[tabindex]").filter(":visible").filter(f).each(function(a,b){d.push({v:b,t:b.tabIndex,i:e++})}),m.disable&&m.disable(),d=a.map(d.sort(h),function(a){return a.v}),a(d)}function j(){return this.keydown(d),this.data(c,!0),this}function k(){return this.unbind("keydown",d),this.removeData(c),this}function l(){return!!this.data(c)}var c="trap.isTrapping";a.fn.extend({trap:j,untrap:k,isTrapping:l});var m={};a.find.find&&a.find.attr!==a.attr&&function(){function e(a){var d=a.getAttributeNode(c);return d&&d.specified?parseInt(d.value,10):b}function f(){d[c]=d.tabIndex=e}function g(){delete d[c],delete d.tabIndex}var c="tabindex",d=a.expr.attrHandle;m={enable:f,disable:g}}()})(jQuery);


var GUI = (function guiInit() {

	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	// settings
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	return {
		DEBUG: false, //debugging infos
		DEBUGfilter: ['collapsible', 'tabcordion'], //filter debug messages


		//----------------------------------------------------------------------------------------------------------------------------------------------------------
		// Initiate GUI
		//----------------------------------------------------------------------------------------------------------------------------------------------------------
		init: function GuiInit() {
			if( !window.console ) { //removing console.log from IE8
				console = {
					log: function() {}
				};
			}

			if( GUI.DEBUG ) {
				console.log('%cGUI DEBUGGING INFORMATION', 'font-size: 25px;');
			}

			//remove fallback HTML class
			$('html')
				.removeClass('no-js')
				.addClass('js');

			//detecting tab key press
			$('body').on('keydown', function(e) {
				var keyCode = e.keyCode || e.which;

				if(keyCode == 9) {
					GUI.debugging( 'GUI: Tab detected', 'report' );

					$('html').addClass('is-keyboarduser');

					$('body').off('keydown');
				}
			});

		},


		//----------------------------------------------------------------------------------------------------------------------------------------------------------
		// detect CSS feature and add class to document
		//
		// @param   feature  [string]  Feature to detect
		//
		// @return  [boolean]
		//----------------------------------------------------------------------------------------------------------------------------------------------------------
		detectCSS: function detectCSS( feature ) {
			GUI.debugging( 'Core: detectCSS called with "' + feature + '"', 'report' );

			var _hasSupport = false; //assuming the worst
			var browserPrefixes = ['Webkit', 'Moz', 'ms', 'O']; //browser prefixes

			feature = feature.toLowerCase(); //normalize
			var featureCapital = feature.charAt(0).toUpperCase() + feature.substr(1); //Sentence case

			var $test = document.createElement('div'); //create test element

			if( $test.style[ feature ] != undefined ) {
				_hasSupport = true; //feature is available without prefix
			}
			else {
				for(var i = 0; i < browserPrefixes.length; i++) { //testing all browser prefixes
					if( $test.style[ browserPrefixes[i] + featureCapital ] != undefined ) {
						_hasSupport = true; //feature is available with prefix
					}
				}
			}

			if( _hasSupport ) {
				$('html').addClass( feature );
			}
			else {
				$('html').addClass( 'no-' + feature );
			}

			return _hasSupport;
		},


		//----------------------------------------------------------------------------------------------------------------------------------------------------------
		// debounce function by _underscore.js
		//
		// @param   func       [function]  Function to be executed
		// @param   wait       [integer]   Wait for next iteration for n in milliseconds
		// @param   immediate  [boolean]   Trigger the function on the leading edge [true], instead of the trailing [false]
		//
		// @return  [function]
		//----------------------------------------------------------------------------------------------------------------------------------------------------------
		debounce: function Debounce(func, wait, immediate) {
			GUI.debugging( 'Core: Debounce called', 'report' );

			var timeout;
			return function() {
				var context = this;
				var args = arguments;

				var later = function() {
					timeout = null;

					if(!immediate) {
						GUI.debugging( 'Core: Debounce executed (1)', 'report' );

						func.apply(context, args);
					}
				};

				var callNow = immediate && !timeout;
				clearTimeout(timeout);
				timeout = setTimeout(later, wait);

				if(callNow) {
					GUI.debugging( 'Core: Debounce executed (2)', 'report' );

					func.apply(context, args);
				}
			};
		},


		//----------------------------------------------------------------------------------------------------------------------------------------------------------
		// throttle function
		//
		// @param   func       [function]  Function to be executed
		// @param   wait       [integer]   Run as much as possible without ever going more than once per [n in milliseconds] duration
		//
		// @return  [function]
		//----------------------------------------------------------------------------------------------------------------------------------------------------------
		throttle: function Throttle(func, wait) {
			GUI.debugging( 'Core: Throttle called', 'report' );

			wait || (wait = 250);
			var last;
			var deferTimer;

			return function() {
				var context = this;
				var now = +new Date;
				var args = arguments;

				if(last && now < last + wait) {
					clearTimeout(deferTimer);

					deferTimer = setTimeout(function() {
						GUI.debugging( 'Core: Throttle executed (1)', 'report' );

						last = now;
						func.apply(context, args);
					}, wait);
				}
				else {
					GUI.debugging( 'Core: Throttle executed (2)', 'report' );

					last = now;
					func.apply(context, args);
				}
			};
		},


		//----------------------------------------------------------------------------------------------------------------------------------------------------------
		// debugging prettiness
		//
		// @param   text  [string]  Text to be printed to debugger
		// @param   code  [string]  The urgency as a string: ['report', 'error', 'interaction', 'send', 'receive']
		//
		// @return  [none]
		//----------------------------------------------------------------------------------------------------------------------------------------------------------
		debugging: function Debug( text, code ) {

			if( GUI.DEBUGfilter.length > 0 ) {
				var identifier = text.split(': ');
				var output = '';

				for(var i = GUI.DEBUGfilter.length - 1; i >= 0; i--) {
					if( identifier[0] === GUI.DEBUGfilter[i] ) {
						output = text;
					}
				};

				text = output;
			}

			if( GUI.DEBUG && text.length > 0 ) {
				if( code === 'report' ) {
					console.log('%c\u2611 ', 'color: green; font-size: 18px;', text);
				}

				else if( code === 'error' ) {
					console.log('%c\u2612 ', 'color: red; font-size: 18px;', text);
				}

				else if( code === 'interaction' ) {
					console.log('%c\u261C ', 'color: blue; font-size: 18px;', text);
				}

				else if( code === 'send' ) {
					console.log('%c\u219D ', 'color: pink; font-size: 18px;', text);
				}

				else if( code === 'receive' ) {
					console.log('%c\u219C ', 'color: pink; font-size: 18px;', text);
				}
			}

		}

	}

}());


//run GUI
GUI.init();




/*! Modals v2.0.2 */
/***************************************************************************************************************************************************************
 *
 * modals
 *
 * Toggeling classes and aria-hidden attr with public API or on click or ESC press
 *
 **************************************************************************************************************************************************************/


(function(GUI) {

	var module = {};

	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	// public vars
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	module.lastFocus = {};


	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	// public API function: open / close a modal
	//
	// @param   _isOpen  [boolean]        Whether to open or close the modal
	// @param   $modal   [jquery object]  The modal element
	// @param   target   [string]         Selector string to id the modal for opening only
	//
	// @return  [none]
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	module.toggelModal = function toggelModal(_isOpen, $modal, target) {
		GUI.debugging( 'modals: ' + ( _isOpen ? 'Closing' : 'Opening' ) + ' modal', 'report' );

		if( _isOpen ) { //closing modal
			$modal
				.removeClass('is-open')
				.attr('aria-hidden', 'true')
				.untrap(); //untrap focus

			$('.modal-backdrop').fadeTo( 200, 0, function fadeOut() {
				$('.modal-backdrop').remove();
			});

			GUI.modals.lastFocus.focus();
		}
		else { //opening modal
			GUI.modals.lastFocus = $(':focus');

			$modal
				.addClass('is-open')
				.attr('aria-hidden', 'false')
				.focus()
				.trap(); //trap focus

			$('<div/>')
				.addClass('modal-backdrop')
				.on('click', function modalBackdrop() {
					GUI.debugging( 'modals: Backdrop clicked', 'interaction' );

					GUI.modals.toggelModal(true, $('.modal'), '');
				})
				.css('opacity', 0)
				.insertAfter( $modal )
				.fadeTo( 250, 1 );
		}

	}

	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	// module init method
	//
	// Run this method once after your DOM was loaded
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	module.init = function modalsInit() {
		GUI.debugging( 'modals: Initiating', 'report' );

		if( $('.js-modal').length ) {
			GUI.debugging( 'modals: Found instances', 'report' );

			GUI.modals.render();
		}
	};


	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	// module render method
	//
	// You can run the render method if you want to bypass the length check or render elements added dynamically to the DOM after loading
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	module.render = function modalsRender() {
		GUI.debugging( 'modals: Rendering', 'report' );

		//open button click
		$('.js-modal').not('.js-rendered').on('click', function openModal() {
			GUI.debugging( 'modals: Open button clicked', 'interaction' );

			var $this = $(this);
			var target = $this.attr('data-modal');
			var $modal = $( target );
			var _isOpen = $modal.hasClass('is-open');

			GUI.modals.toggelModal(_isOpen, $modal, target);
		}).addClass('js-rendered');

		//ESC button listener
		$('.js-modalbody').not('.js-rendered').keyup(function escapeKey(e) {
			if(e.keyCode == 27) {
				GUI.debugging( 'modals: Esc button clicked', 'interaction' );

				var $modal = $('.modal');

				GUI.modals.toggelModal(true, $modal, '');
			}
		}).addClass('js-rendered');

		//close button click
		$('.js-modalclose').not('.js-rendered').on('click', function modalCloseButton() {
			GUI.debugging( 'modals: Close button clicked', 'interaction' );

			var $modal = $('.modal');

			GUI.modals.toggelModal(true, $modal, '');
		}).addClass('js-rendered');
	}


	GUI.modals = module;


	// run module
	GUI.modals.init();

}(GUI));




/*! Tabcordions v3.0.0 */
/***************************************************************************************************************************************************************
 *
 * tabcordion-soft
 *
 * This module includes the API for collapsible as well as the tabcordion logic.
 *
 **************************************************************************************************************************************************************/


(function(GUI) {

	var tabcordion = {};
	var collapsible = {};


	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	// public API function: collapsible
	//
	// @param   target       [string]    Selector for target element to toggle is-open class
	// @param   _isAnimated  [boolean]   Wether or not to animate the height
	// @param   Callback     [function]  Callback function executed after completion
	//
	// @return  [none]
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	collapsible.toggle = function( target, _isAnimated, Callback ) {
		GUI.debugging( 'collapsible: Toggle called', 'report' );

		if( target instanceof jQuery ) {
			var $targets = target;
		}
		else {
			var $targets = $( target );
		}


		jQuery.fn.reverse = [].reverse; //adding reverse to jquery

		$targets.reverse().each(function iterateTargets() { //iterate over each element for toggling

			var $target = $(this);
			var _isOpen = $target.hasClass('is-open');

			if( _isOpen ) {
				GUI.collapsible.close( $target, _isAnimated, Callback );
			}
			else {
				GUI.collapsible.open( $target, _isAnimated, Callback );
			}

		});
	};


	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	// public API function: collapsible closing
	//
	// @param   target       [string]    Selector for target element to toggle is-open class
	// @param   _isAnimated  [boolean]   Wether or not to animate the height
	// @param   Callback     [function]  Callback function executed after completion
	//
	// @return  [none]
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	collapsible.close = function closingCollapsible( target, _isAnimated, Callback ) {
		GUI.debugging( 'collapsible: Closing element "' + target + '"', 'report' );

		if( target instanceof jQuery ) {
			var $target = target;
		}
		else {
			var $target = $( target );
		}

		if( !$target.length ) {
			GUI.debugging( 'collapsible: No element found to close', 'error' );
			return;
		}

		var oldHeight = $target.height();

		$target
			.css({ 'height': oldHeight })
			.removeClass('is-open')
			.attr('aria-hidden', 'true');

		if( _isAnimated ) {
			$target
				.stop(true)
				.animate({ 'height': 0 }, 400, Callback);
		}
		else {
			$target.css({ 'height': 0 });

			if( typeof Callback !== 'undefined' && Callback !== null ) {
				Callback();
			}
		}

	};


	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	// public API function: collapsible opening
	//
	// @param   target       [string]    Selector for target element to toggle is-open class
	// @param   _isAnimated  [boolean]   Whether or not to animate the height
	// @param   Callback     [function]  Callback function executed after completion
	// @param   withFocus    [boolean]   Should the focus move to the opened element? Default true
	//
	// @return  [none]
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	collapsible.open = function openingCollapsible( target, _isAnimated, Callback, withFocus ) {
		GUI.debugging( 'collapsible: Opening element "' + target + '"', 'report' );

		if( withFocus === undefined ) {
			withFocus = true;
		}

		if( target instanceof jQuery ) {
			var $target = target;
		}
		else {
			var $target = $( target );
		}

		if( !$target.length ) {
			GUI.debugging( 'collapsible: No element found to open', 'error' );
			return;
		}

		if( _isAnimated ) {
			var oldHeight = $target.css('height');
			var height = $target.css({ 'height': 'auto' }).height();
			$target.css({ 'height': oldHeight });
		}

		$target
			.addClass('is-open')
			.attr('aria-hidden', 'false');

		if( withFocus ) {
			$target.first().focus();
		}

		if( _isAnimated ) {
			$target.stop(true).animate({ 'height': height }, 400, function animateCallback() {
				$target.css({ 'height': '' });

				if( typeof Callback !== 'undefined' && Callback !== null ) {
					Callback();
				}
			});
		}
		else {
			$target.css({ 'height': '' });

			if( typeof Callback !== 'undefined' && Callback !== null ) {
				Callback();
			}
		}

	};


	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	// module init method
	//
	// Run this method once after your DOM was loaded
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	tabcordion.init = function tabcodionsInit() {
		GUI.debugging( 'tabcordion: Initiating', 'report' );

		if( $('.js-collapsible').length ) {
			GUI.debugging( 'tabcordion: Found instance', 'report' );

			GUI.tabcordion.render();
		}
	};


	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	// module render method
	//
	// You can run the render method if you want to bypass the length check or render elements added dynamically to the DOM after loading
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	tabcordion.render = function tabcodionsRender() {
		GUI.debugging( 'tabcordion: Rendering', 'report' );

		$('.js-collapsible').not('.js-rendered').on('click arrow', function clickCollapsible(e) {
			GUI.debugging( 'collapsible: Collapsible clicked', 'interaction' );
			e.preventDefault();

			var $this = $(this);
			var target = $this.attr('href') ? $this.attr('href') : $this.attr('data-collapsible');
			var $tabcordion = $this.parents('.tabcordion')
			var _hasScrollOffset = $tabcordion.attr('data-tabcordion-scroll') !== 'undefined' && $tabcordion.attr('data-tabcordion-scroll') !== 'none';

			if( $tabcordion.length ) {
				GUI.debugging( 'collapsible: Found to be inside tabcordion', 'report' );

				var $tabs = $this.parents('.tabcordion').find('.collapsible-body');
				var _isMobile = parseInt( $('html').css('line-height') ) === 1; //responsive animations (requires responsive css on html)
				var _isAccordion = true;

				if( !_isMobile ) {
					_isAccordion = false;

					if( $this.parents('.tabcordion-accordion').length ) {
						_isAccordion = true;
					}
				}

				if( $this.parents('.tabcordion-tabs').length ) {
					_isAccordion = false;
				}

				//animating transition
				if( _isAccordion ) {
					GUI.collapsible.close( $tabs.filter('.is-open'), true );

					if( _hasScrollOffset ) {
						GUI.debugging( 'collapsible: Open accordion with scroll-to-content', 'report' );

						var scrollOffset = $tabcordion.attr('data-tabcordion-scroll');
						if( scrollOffset === undefined ) {
							scrollOffset = 0;
						}

						GUI.collapsible.open( $tabcordion.find( target ), true, function scrollToTab() {
							//scroll to top
							$('html, body').animate({ scrollTop: ( $this.offset().top - 60 - scrollOffset ) }, 300);
						}, false);
					}
					else {
						GUI.debugging( 'collapsible: Open accordion without scroll-to-content', 'report' );

						GUI.collapsible.open( $tabcordion.find( target ), true, null, false);
					}
				}
				else {
					GUI.collapsible.close( $tabs.filter('.is-open'), false, function closingCallback() {
						GUI.collapsible.open( $tabcordion.find( target ), false, null, false );
					});
				}

				//adding active states to tabs and headers
				$tabcordion
					.find('.js-collapsible')
					.parents('.js-collapsible-tab')
					.removeClass('is-active');

				$tabcordion
					.find('.js-collapsible[data-collapsible="' + target + '"], .js-collapsible[href="' + target + '"]')
					.parents('.js-collapsible-tab')
					.addClass('is-active');

				//changing aria attributes
				$tabcordion
					.find('.js-collapsible')
					.attr('aria-selected', false)
					.attr('aria-expanded', false);

				$tabcordion
					.find('.js-collapsible[data-collapsible="' + target + '"], .js-collapsible[href="' + target + '"]')
					.attr('aria-selected', true)
					.attr('aria-expanded', true);

				if( e.type === 'click' ) { //only trigger on tabbing or clicking, not arrowing
					$( target ).focus();
				}
			}
			else {
				GUI.debugging( 'collapsible: Triggering pure toggle', 'report' );

				var mode = $this.attr('data-collapsible-mode');

				//collapsible API
				if( mode === 'show' ) {
					GUI.collapsible.open( target, true );
				}
				else if( mode === 'hide' ) {
					GUI.collapsible.close( target, true );
				}
				else {
					GUI.collapsible.toggle( target, true );
				}
			}

		});


		//Arrow keys for tabs
		$('.tabcordion-tabs .js-collapsible').not('.js-rendered').on('keydown', function(e) {
			GUI.debugging( 'collapsible: Keyboard used', 'interaction' );

			var $this = $(this);
			var $prev = $this.parents('li').prev().children('.js-collapsible');
			var $next = $this.parents('li').next().children('.js-collapsible');
			var $all = $this.parents('.tabcordion-tabs').find('.js-collapsible');
			var $target;
			var dir = '';

			switch(e.keyCode) {
				case 37:
					$target = $prev;
					dir = 'Left';
					break;
				case 39:
					$target = $next;
					dir = 'Right';
					break;
				default:
					$target = false
					break;
			}

			if( $target.length ) {
				GUI.debugging( 'collapsible: ' + dir + ' arrow key used', 'interaction' );

				$all.attr('tabindex', '-1'); //disable all tabs for focus

				$target //enable the target one
					.attr('tabindex', null)
					.focus()
					.trigger('arrow');
			}
		});

		$('.js-collapsible').addClass('js-rendered');
	};


	GUI.tabcordion = tabcordion;
	GUI.collapsible = collapsible;


	// run module
	GUI.tabcordion.init();

}(GUI));